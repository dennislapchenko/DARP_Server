//
//  LoginServerUserLoggedOutHandler.cs
//
//  Author:
//       Dennis Lapchenko <>
//
//  Copyright (c) 2016 Dennis Lapchenko
//
//  This program is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 2 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using MMO.Photon.Server;
using MMO.Photon.Application;
using MMO.Framework;
using ComplexServerCommon;
using SubServerCommon;


namespace LoginServer.Handlers
{
	public class LoginServerUserLoggedOutHandler : PhotonServerHandler
	{
		public LoginServerUserLoggedOutHandler(PhotonApplication application) : base(application)
		{
		}

		#region implemented abstract members of PhotonServerHandler

	

		public override MessageType Type {
			get { return MessageType.Async; }
		}

		public override byte Code {
			get { return (byte)ServerEventCode.UserLoggedOut; }
		}

		public override int? SubCode {
			get { return null; }
		}

		protected override bool OnHandleMessage (IMessage message, PhotonServerPeer serverPeer)
		{
			Log.DebugFormat("Handling User Logged Out Message");
			LoginServer server = Server as LoginServer;
			if (server != null)
			{
				Guid peerId = new Guid((byte[])message.Parameters[(byte)ClientParameterCode.PeerId]);
				server.ConnectionCollection<SubServerConnectionCollection>().Clients.Remove(peerId);	
			}
			return true;
		}

		#endregion
	}
}

